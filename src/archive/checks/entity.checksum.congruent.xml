<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>entity.checksum.congruent.1</id>
  <name>Entity checksum and algorithm are congruent.</name>
  <description>Check that an entity checksum and algorithm are congruent with the data they describe.</description>
  <type>Interoperable</type>
  <level>REQUIRED</level>
  <environment>rscript</environment>
  <code><![CDATA[
  check <- function() {
    library(base)
    library(metadig)
    library(dataone)
    
    # First, find the first resource identifier. There may be multiple
    # resource identifiers described in this metadata document, but only 
    # the first will be checks, as it would take an excessive amount of time 
    # to check all res ids for all datasets.
    #firstResId = getFirstResId(resourceIdentifier)
    
    # Skip check if no resource identifiers present
    if(!resourceIdentifierPresent) {
      return(list(status="SKIP", values=list(list(value="No resource identifiers found, can't check if checksum is congruent with data."))))
    }  

    status <- "SUCCESS"
    if (length(resourceIdentifiers) > 0) {
        firstResId <- resourceIdentifiers[[1]]
    } else {
        # No data entities were selected by the xpath, so tell the user no check was performed.
        outputList[[length(outputList)+1]] <- list(value=sprintf("No data table descriptions are present, so uanble to check for attributes."))
        return(list(status="SKIP", values=outputList))
    }
    
    # Next, retrieve the objects checksum from DataONE
    # We could get the source MN baseURL from the metadata and get the checksum 
    # from there, but that would involve another call to the CN to get the MN
    # baseURL (listNodes)
    cnProd <- dataone:CNode()
    chksum <- getChecksum(dnProd, firstResId)
    
    # Compare the checksum from the metadata with the DataONE checksum
    if(checksum )
    
    # Check if the checksum value and algorithm for at least one data entity exists
    if(!checksumAndAlgorithmPresent) {
      return(list(status = "FAILURE", output = sprintf("A data resource checksum is not present.")))
    }
    
    return(list(status = "SUCCESS", output = sprintf("A data resource checksum and checksum algorithm are present (%s resources found).", checksumAlgorithmCount)))
  }
  result <- check()
  mdq_result <- list(status=result$status, output=list(list(value=result$output)))
  ]]></code>
  <selector>
    <name>checksumAndAlgorithmPresent</name>
    <xpath>boolean(/eml/dataset/*/physical/authentication[@method])
    </xpath>
  </selector>
  <selector>
    <name>checksum</name>
    <xpath>/eml/dataset/*/physical/authentication</xpath>
  </selector>
  <selector>
    <name>checksumCount</name>
    <xpath>count(/eml/dataset/*/physical/authentication)</xpath>
  </selector>
  <selector>
    <name>checksumAlgorithmCount</name>
    <xpath>count(/eml/dataset/*/physical/authentication[@method])</xpath>
  </selector>
  <selector>
    <name>resourceIdentifierPresent</name>
    <xpath>boolean(/eml/@id or
        /eml/dataset/*[self::dataTable|self::spatialRaster|self::spatialVector|self::storedProcedure|self::view|self::otherEntity]/@id or
        /eml/dataset/alternateIdentifier)
    </xpath>
  </selector>
  <selector>
    <name>resourceIdentifiers</name>
    <xpath>/eml/@id |
        /eml/dataset/*[self::dataTable|self::spatialRaster|self::spatialVector|self::storedProcedure|self::view|self::otherEntity]/@id |
        /eml/dataset/alternateIdentifier
    </xpath>
  </selector>
  <dialect>
    <name>eml</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>
