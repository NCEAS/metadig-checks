<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>resource.accessControlRules.present.1</id>
  <name>Access Control Rules</name>
  <description>Check that access control rules exists.</description>
  <type>Accessible</type>
  <level>OPTIONAL</level>
  <environment>python</environment>
  <code><![CDATA[
def call():
  
  import re
  import metadig.variable as mvar
  import xml.etree.ElementTree as ET
  global systemMetadata

  global output
  global status
  
  # For the metadata object, check if access control rules are specified for a group of users, if public 
  # access is not granted. However, if public access is granted, then this check always passes.
  # Note that this check does not inspect the metadata, but instead evaluates the DataONE system 
  # metadata
 
  if ('systemMetadata' not in globals() or systemMetadata is None):
    status = "FAILURE"
    output = "DataONE system metadata not available, unable to confirm access control rules"
    return False
  
  # Turns out that the string that contains the sysmeta xml can have non-ascii
  # characters in the <fileName> element (maybe others), so convert it to unicode.
  # Python 2.x xml.etree can't handle non-ascii characters, so remove them from the system metadata
  # as they will only be in the uncontrolled elements like fileName, which we are not using for this check
  systemMetadata = systemMetadata.encode('ascii',errors='ignore')
  root = ET.fromstring(systemMetadata)
  
  # Check an access rule that allows 'read' permission to the 'public' subject.
  # for example:
  # <accessPolicy>
  #  <allow>
  #    <subject>public</subject>
  #    <permission>read</permission>
  #  </allow>
  #  <allow>
  #    <subject>http://orcid.org/0000-0002-9185-0144</subject>
  #    <permission>read</permission>
  #    <permission>write</permission>
  #    <permission>changePermission</permission>
  #  </allow>
  #  ...
  # </accessPolicy>
  
  rules = root.findall("./accessPolicy/allow")
  # No access rules exist
  if(len(rules) == 0):
    status = "FAILURE"
    output = "No access rules in system metadata, only rights holder can access this object"
    return False

  # Loop through the access rules, checking for public access rule and any other rules
  publicRead = False
  otherUserRead = False
  
  for rule in rules:
    subject = rule.find("subject").text
    perms = rule.findall("permission")
    read = False
    changePermission = False
    for perm in perms:
      if perm.text == "read": 
        read = True
      if perm.text == "changePermission": 
        changePermission = True
    
    if (subject == "public"):
      if read or changePermission:
        publicRead = True
    else:
      if read or changePermission:
        otherUserRead = True
        
  if publicRead:
    status = "SUCCESS"
    output = "Metadata are publicly available as public read is set in DataONE system metadata."
    return True
  else:
    if otherUserRead:
      status = "SUCCESS"
      output = "Metadata are not publicly available but have rules to allow access for specific users."
      return True
    else:
      status = "FAILURE"
      output = "Metadata are not publicly available  but do not have rules to allow access for specific users."
      return True
    
      ]]></code>
  <selector>
    <name>accessControlRules</name>
    <xpath>
          /eml/dataset/intellectualRights/text()[normalize-space()] |
          /*/identificationInfo/*/resourceConstraints/MD_LegalConstraints/accessConstraints/*/text()[normalize-space()]
      </xpath>
  </selector>
  <dialect>
    <name>DataCite 4</name>
    <xpath>boolean(/*[local-name() = 'resource'])</xpath>
  </dialect>
  <dialect>
    <name>Ecological Metadata Language</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
  <dialect>
    <name>ISO 19115 and ISO 19115-2 / ISO 19139, ISO 19139-2, ISO 19115-1, ISO 19115-3 </name>
    <xpath>boolean(/*[local-name() = 'MI_Metadata' or local-name() = 'MD_Metadata'])</xpath>
  </dialect>
</mdq:check>
