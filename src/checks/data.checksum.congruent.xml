<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>data.checksum.congruent</id>
  <name>Data checksum is congruent</name>
  <description>Check that a data file checksum is congruent with system metadata.</description>
  <type>identification</type>
  <level>REQUIRED</level>
  <environment>rscript</environment>
  <code><![CDATA[
    library(metarake)
    library(metadig)
    
    result <- list()
    
    sys <- parse_system_metadata(systemMetadata)

    if (grepl("test", sys@authoritativeMemberNode, ignore.case = TRUE)){
      options(dataone_test_token = Sys.getenv("DATAONE_AUTH_TOKEN"))
    } else {
      options(dataone_token = Sys.getenv("DATAONE_AUTH_TOKEN"))
    }
    
    data_pids <- NULL
    attempt <- 1
    while(is.null(data_pids) && attempt <=10) {
      attempt <- attempt + 1
      try(data_pids <- get_data_pids(sys@identifier, sys@authoritativeMemberNode))
      Sys.sleep(5)
    }

    data_pids <- data_pids[which(data_pids != sys@identifier)]
    authNode <- sys@authoritativeMemberNode
    if (length(data_pids) > 100){
      file_num = 100
    } else {
      file_num = length(data_pids)
    }
    if (length(data_pids) > 0){
      for (i in 1:file_num){
        
        data_obj <- tryCatch({
          get_data_file(authNode, data_pids[i])
        },
        error = function(e) {
          e
        })
        
        if (inherits(data_obj, "error")) {
          result[[i]] <- list(status = "ERROR")
          save_output(paste("Something went wrong when trying to download ", data_pids[i], ":", data_obj))
          next
        }
        
        sys_d <- data_obj@sysmeta
    
        fname <- sys_d@fileName
        fpath <- tempfile(fname)
        writeBin(data_obj@data, fpath)

        sys_checksum <- sys_d@checksum
        sys_checksum_alg <- gsub("-", "", tolower(sys_d@checksumAlgorithm))
        
        if (sys_checksum_alg %in% c("md5", "sha1", "crc32", "sha256", "sha512")){
          checksum <- digest::digest(fpath, algo = sys_checksum_alg, file = TRUE)
        } else {
          result[[i]] <- list(status = "ERROR")
          save_output(paste("Checksum algorithm ", sys_checksum_alg, "not recognized for file", fname))
          next
        }
        
        if (checksum == sys_checksum) {
          status = TRUE
        } else {
          status = FALSE
        }
        
        if (!status){
          result[[i]] <- list(status = "FAILURE")
          save_output(paste(fname, "has an incongruent checksum."))
        } else if (status){
          result[[i]] <- list(status = "SUCCESS")
          save_output(paste(fname, "has a matching checksum."))
        }
      }
      
      statuses <- unlist(lapply(result, function(x){x$status}))
      outputs <- unlist(lapply(result, function(x){x$output}))
      
      failures <- length(which(statuses == "FAILURE"))
      errors <- length(which(statuses == "ERROR"))
      successes <- length(which(statuses == "SUCCESS"))
      
      output_string <- paste(successes, "file(s) have matching checksum information.",
                             failures, "file(s) have mismatched checksum information.",
                             errors, "files(s) errored on download.")
      
      save_output(output_string, type = "text")
  
  if (any(statuses == "SUCCESS")){
    mdq_result$status <- "SUCCESS"
  } else if (all(statuses == "ERROR")){
    mdq_result$status <- "ERROR"
  } else {
    mdq_result$status <- "FAILURE"
  }
    } else {
      mdq_result <- list(output = list(list(value = "No data files to check.")), status = "SUCCESS")
    }
  ]]></code>
  <selector>
    <name>entityNames</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./entityName</xpath>
    </subSelector>
  </selector>
  <selector>
    <name>ids</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]/@id</xpath>
  </selector>
  <dialect>
    <name>eml</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>
