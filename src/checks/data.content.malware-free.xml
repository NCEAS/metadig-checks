<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>data.content.malware-free</id>
  <name>Data does not contain malware</name>
  <description>Check that a data file does not contain malware using yara.</description>
  <type>Accessible</type>
  <level>REQUIRED</level>
  <environment>python</environment>
  <code><![CDATA[
def call():
  global output
  global status
  global output_identifiers
  global output_type
  global metadigpy_result

  from metadig import StoreManager
  import metadig as md
  import yara
  

  manager = StoreManager(storeConfiguration)

  output_data = []
  status_data = []
  output_identifiers = []
  output_type = []
  metadigpy_result = {}

  if len(dataPids) == 0:
    output_data = "No data objects found."
    output_type = "text"

  rules = yara.load("/var/lib/metadig/yara-compiled.yc")

  for pid in dataPids:
      output_identifiers.append(pid)

      # If data object is not available, skip the pid.
      try:
        obj, sys = manager.get_object(pid)
      except Exception as e:
        output_data.append(f"Unexpected Exception: {e}")
        output_type.append("text")
        status_data.append("FAILURE")
        continue

      fname = md.read_sysmeta_element(sys, "fileName")
      
      matches = rules.match(data = obj.read())


      if len(matches) == 0:
        output_data.append(f"No malware was detected in `{fname}`.")
        output_type.append("markdown")
        status_data.append("SUCCESS")
      elif len(matches) > 0:
        output_data.append(f"`{fname}` had the following matches indicating potential malware: {matches}.")
        output_type.append("markdown")
        status_data.append("FAILURE")

  successes = sum(x == "SUCCESS" for x in status_data)
  failures = sum(x == "FAILURE" for x in status_data)
  output = output_data

  if failures > 0:
      status = "FAILURE"
  else:
      status = "SUCCESS"

  metadigpy_result["identifiers"] = output_identifiers
  metadigpy_result["output"] = output_data
  metadigpy_result["status"] = status
  return True
  
]]></code>
  <selector>
    <name>id</name>
    <xpath>/eml/packageId</xpath>
  </selector>
  <dialect>
    <name>eml</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>