<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>data.format.congruent</id>
  <name>Data format congruent with formatId</name>
  <description>Check that a data file format matches the formatId.</description>
  <type>identification</type>
  <level>REQUIRED</level>
  <environment>rscript</environment>
  <code><![CDATA[
    library(metarake)
    library(metadig)
    
    result <- list()
    
    sys <- parse_system_metadata(systemMetadata)

    if (grepl("test", sys@authoritativeMemberNode, ignore.case = TRUE)){
      options(dataone_test_token = Sys.getenv("DATAONE_AUTH_TOKEN"))
    } else {
      options(dataone_token = Sys.getenv("DATAONE_AUTH_TOKEN"))
    }
    authNode <- sys@authoritativeMemberNode
    data_pids <- get_data_pids(sys@identifier, sys@authoritativeMemberNode)
    data_pids <- data_pids[which(data_pids != sys@identifier)]
    
    if (length(data_pids) > 100){
      file_num = 100
    } else {
      file_num = length(data_pids)
    }
    if (length(data_pids) > 0){
      for (i in 1:file_num){
        
        data_obj <- tryCatch({
          get_data_file(authNode, data_pids[i])
        },
        error = function(e) {
          e
        })
        
        if (inherits(data_obj, "error")) {
          result[[i]] <- list(status = "ERROR")
          save_output(paste("Something went wrong when trying to download ", data_pids[i], ":", data_obj))
          next
        }
        
        sys_d <- data_obj@sysmeta
        
        fname <- sys_d@fileName
        fpath <- tempfile(fileext = paste0(".", tools::file_ext(fname)))
        writeBin(data_obj@data, fpath)
        
        status <- data_format_congruent(fpath, sys_d)
        
        if (!status){
          result[[i]] <- list(status = "FAILURE")
          save_output(paste("The format of object", data_pids[i], "matches the formatId."))
        } else if (status){
          result[[i]] <- list(status = "SUCCESS")
          save_output(paste("The format of object", data_pids[i], "does not match the formatId."))
        }
      }
      statuses <- unlist(lapply(result, function(x){x$status}))
      outputs <- unlist(lapply(result, function(x){x$output}))
      
      failures <- length(which(statuses == "FAILURE"))
      errors <- length(which(statuses == "ERROR"))
      successes <- length(which(statuses == "SUCCESS"))
      
      output_string <- paste(successes, "file(s) with matching formats.",
                             failures, "file(s) with mismatched formats.",
                             errors, "files(s) errored.")
      
     save_output(output_string, type = "text")
     
     if (any(statuses == "SUCCESS")){
       mdq_result$status <- "SUCCESS"
     } else if (all(statuses == "ERROR")){
       mdq_result$status <- "ERROR"
     } else {
       mdq_result$status <- "FAILURE"
     }
    } else {
      mdq_result <- list(output = list(list(value = "No data files to check.")), status = "SUCCESS")
    }
  ]]></code>
  <selector>
    <name>id</name>
    <xpath>/eml/packageId</xpath>
  </selector>
  <dialect>
    <name>eml</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>