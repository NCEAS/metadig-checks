<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>data.netcdf.global-attributes-complete</id>
  <name>NetCDF file contains required global attributes</name>
  <description>Check that a NetCDF file contains all required global attributes.</description>
  <type>Findable</type>
  <level>REQUIRED</level>
  <environment>python</environment>
  <code><![CDATA[
def call():
  global output
  global status
  global output_identifiers
  global output_type
  global metadigpy_result

  from metadig import StoreManager
  import metadig as md
  import xarray as xr

  manager = StoreManager(storeConfiguration)

  output_data = []
  status_data = []
  output_identifiers = []
  output_type = []
  metadigpy_result = {}


  if not dataPids or len(dataPids) == 0:
    output_data = "No data objects found."
    output_type = "text"

  for pid in dataPids:
      output_identifiers.append(pid)

      # If data object is not available, skip the pid.
      try:
        obj, sys = manager.get_object(pid)
      except Exception as e:
        output_data.append(f"Unexpected Exception: {e}")
        output_type.append("text")
        status_data.append("FAILURE")
        continue

      fname = md.read_sysmeta_element(sys, "fileName")
      fid = md.read_sysmeta_element(sys, "formatId")

      if not fid.startswith("netCDF"):
        output_data.append(f"`{fname}` does not appear to be a netCDF file.")
        output_type.append("markdown")
        status_data.append("SUCCESS")
        continue

      ds = xr.open_dataset(obj)

      # check global atts
      required_global_attrs = ["title", "summary", "keywords", "Conventions", "references"]
      missing_globals = [attr for attr in required_global_attrs if attr not in ds.attrs]
      
      if missing_globals:
        lines = f"`{fname}` is missing global attributes: {', '.join(missing_globals)}"
        output_data.append(lines)
        output_type.append("markdown")
        status_data.append("FAILURE")
      else:
        output_data.append(f"`{fname}` contains all required global attributes.")
        output_type.append("markdown")
        status_data.append("SUCCESS")

  successes = sum(x == "SUCCESS" for x in status_data)
  failures = sum(x == "FAILURE" for x in status_data)
  output = output_data

  if failures > 0:
      status = "FAILURE"
  else:
      status = "SUCCESS"

  metadigpy_result["identifiers"] = output_identifiers
  metadigpy_result["output"] = output_data
  metadigpy_result["status"] = status
  return True
  
]]></code>
  <selector>
    <name>id</name>
    <xpath>/eml/packageId</xpath>
  </selector>
  <dialect>
    <name>eml</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>