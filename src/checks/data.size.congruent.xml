<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>data.size.congruent</id>
  <name>Data size is congruent</name>
  <description>Check that a data file size is congruent with system metadata.</description>
  <type>identification</type>
  <level>REQUIRED</level>
  <environment>rscript</environment>
  <code><![CDATA[
    library(metarake)
    library(metadig)
    
    result <- list()
    
    sys <- parse_system_metadata(systemMetadata)
    data_pids <- get_data_pids(sys@identifier, sys@authoritativeMemberNode)
    data_pids <- data_pids[which(data_pids != sys@identifier)]
    
    endpoint <- get_mn_endpoint(sys@authoritativeMemberNode)
    
    data_urls <- paste0(endpoint, "object/", data_pids)
    sysmeta_urls <- paste0(endpoint, "meta/", data_pids)
    
    if (length(data_urls) > 100){
      file_num = 100
    } else {
      file_num = length(data_urls)
    }
    if (length(data_pids) > 0){
      for (i in 1:file_num){
        
        data_path <- tryCatch({
          mdq_get(data_urls[i])
        },
        error = function(e) {
          e
        })
        
        if (inherits(data_path, "error")) {
          result[[i]] <- list(status = "ERROR", output = paste("Something went wrong when trying to download ", data_urls[i]))
          next
        }
        
        sysmeta_path <- tryCatch({
          mdq_get(sysmeta_urls[i])
        },
        error = function(e) {
          e
        })
        
        if (inherits(sysmeta_path, "error")) {
          result[[i]] <- list(status = "ERROR", output = paste("Something went wrong when trying to download ", sysmeta_urls[i]))
          next
        }
        
        sys_d <- parse_system_metadata(sysmeta_path)
        fname <- sys_d@fileName
        sys_size <- sys_d@size

        size <- file.size(data_path)
        
        if (size == sys_size) {
          status = TRUE
        } else {
          status = FALSE
        }
        
        if (!status){
          result[[i]] <- list(status = "FAILURE", output = paste(fname, "has an incongruent file size."))
        } else if (status){
          result[[i]] <- list(status = "SUCCESS", output = paste(fname, "has a matching file size."))
        }
      }
      
      statuses <- unlist(lapply(result, function(x){x$status}))
      outputs <- unlist(lapply(result, function(x){x$output}))
      
      failures <- length(which(statuses == "FAILURE"))
      errors <- length(which(statuses == "ERROR"))
      successes <- length(which(statuses == "SUCCESS"))
      
      output_string <- paste(successes, "file(s) have matching size information.",
                             failures, "file(s) have mismatched size information.",
                             errors, "files(s) errored on download.")
      
      if (any(statuses == "SUCCESS")){
        mdq_result <- list(output = list(list(value = output_string)), status = "SUCCESS")
      } else if (all(statuses == "ERROR")){
        mdq_result <- list(output = list(list(value = output_string)), status = "ERROR")
      } else {
        mdq_result <- list(output = list(list(value = output_string)), status = "FAILURE")
      }
    } else {
      mdq_result <- list(output = list(list(value = "No data files to check.")), status = "SUCCESS")
    }
  ]]></code>
  <selector>
    <name>entityNames</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./entityName</xpath>
    </subSelector>
  </selector>
  <selector>
    <name>ids</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]/@id</xpath>
  </selector>
  <dialect>
    <name>eml</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
    </dialect>
</mdq:check>
