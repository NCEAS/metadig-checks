<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>data.table-text-delimited.column-names-well-formed</id>
  <name>Check whether there are any special characters found in the column names</name>
  <description>When special characters are found in column names, this could potentially cause parsing issues.</description>
  <type>identification</type>
  <level>INFO</level>
  <environment>python</environment>
  <code><![CDATA[

def call():
    global output
    global status
    global output_identifiers
    global output_type
    global metadigpy_result

    from metadig import StoreManager
    from metadig import metadata as md
    import pandas as pd
    import io
    import re

    manager = StoreManager(storeConfiguration)  

    output_data = []
    status_data = []
    output_identifiers = []
    output_type = []
    metadigpy_result = {}

    if len(dataPids) == 0:
        output_data = "No data objects found."

    for pid in dataPids:
        output_identifiers.append(pid)

        # If data object is not available, skip the pid.
        try:
            # if file is not text/csv, skip it
            # otherwise get the object and filename
            obj, fname, csv_status = md.get_valid_csv(manager, pid)
            if csv_status == "SKIP":
                output_data.append(f"`{fname}` is not a text-delimited table, skipping.")
                output_type.append("markdown")
                status_data.append(csv_status)
                continue
        except Exception as e:
            output_data.append(f"Unexpected Exception: {e}")
            output_type.append("markdown")
            status_data.append("FAILURE")
            continue

        # Ensure that the data object is documented in the list of entity names
        entity_index = md.find_entity_index(fname, pid, entityNames, ids)[0]
        if entity_index is None:
            output_data.append(f"`{fname}` does not appear to be documented in the metadata.")
            output_type.append("markdown")
            status_data.append("FAILURE")
            continue

        # Set the default expecated header line value (the first row is headers)
        num_header_lines = 0
        # headerLines represents 'numHeaderLines' which is retrieved from the EML document
        if isinstance(headerLines, list):
            # If we successfully retrieve a list, we will check what the value is
            header_line_value = headerLines[entity_index]
            if header_line_value == 'null':
                # There are no header lines
                pass
            if isinstance(header_line_value, int):
                # We'll use the value from the list of it is an integer
                num_header_lines = header_line_value
        
        # Try to read the data object
        obj_bytes_read = obj.read()
        encoding_type, enc_msg = md.detect_text_encoding(obj_bytes_read)
        d_read_decoded = obj_bytes_read.decode(encoding_type)
        df, error = md.read_csv_with_metadata(d_read_decoded, fieldDelimiter[entity_index], num_header_lines, encoding_type)
        if error:
            output_data.append(f"`{fname}`is unable to be read as a table. {error}")
            output_type.append("markdown")
            status_data.append("FAILURE")
            continue

        # Check for special characters and spaces
        special_chars_summary = {}
        allowed_pattern = re.compile(r'[^a-zA-Z0-9_-]')
        column_names = df.columns
        for column in column_names:
            special_chars_found = list(set(allowed_pattern.findall(column)))
            if special_chars_found:
                special_chars_summary[column] = special_chars_found

        if len(special_chars_summary) == 0:
            output_data.append(f"No special characters found in columns in `{fname}`.")
            output_type.append("markdown")
            status_data.append("SUCCESS")
        else:
            # Create the markdown table
            col_name_mxw = max(
                len("Column Names"),
                max(len(str(c)) for c in column_names)
            )
            spch_mxw = len("Special Characters")
            header = f"| {'Column Names':<{col_name_mxw}} | {'Special Characters':<{spch_mxw}} |"
            separator = f"|{'-' * (col_name_mxw + 2)}|{'-' * (spch_mxw + 2)}|"
            rows = [
                f"| {md.escape_for_markdown(col):<{col_name_mxw}} | {md.escape_for_markdown(', '.join(chars) if isinstance(chars, list) else chars):<{spch_mxw}} |"
                for col, chars in special_chars_summary.items()
            ]
            row_list = [header, separator] + rows
            table_rows = "\n".join(row_list)
            output_data.append(f"`{fname}` contains columns names with special characters: {table_rows}")
            output_type.append("markdown")
            status_data.append("FAILURE")

    successes = sum(x == "SUCCESS" for x in status_data)
    failures = sum(x == "FAILURE" for x in status_data)
    skips = sum(x == "SKIP" for x in status_data)
    output = output_data
    if failures > 0:
        status = "FAILURE"
    else:
        status = "SUCCESS"

    metadigpy_result["identifiers"] = output_identifiers
    metadigpy_result["output"] = output_data
    metadigpy_result["status"] = status
    return True

  ]]></code>
  <selector>
    <name>entityNames</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./entityName</xpath>
    </subSelector>
  </selector>
  <selector>
    <name>ids</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]/@id</xpath>
  </selector>
  <selector>
     <name>fieldDelimiter</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
     <subSelector>
        <name>...</name>
        <xpath>./physical/dataFormat/textFormat/simpleDelimited/fieldDelimiter</xpath>
    </subSelector>
  </selector>
  <selector>
     <name>headerLines</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
     <subSelector>
        <name>...</name>
        <xpath>./physical/dataFormat/textFormat/numHeaderLines</xpath>
    </subSelector>
  </selector>
  <dialect>
    <name>Ecological Metadata Language</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>
