<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>data.table-text-delimited.glimpse</id>
  <name>Show a summary of a text-delimited table</name>
  <description>CShow a summary of a text-delimited table.</description>
  <type>identification</type>
  <level>INFO</level>
  <environment>python</environment>
  <code><![CDATA[

def call():
    global output
    global status
    global output_identifiers
    global output_type
    global metadigpy_result

    from metadig import StoreManager
    import metadig as md
    import pandas as pd
    import io

    manager = StoreManager(storeConfiguration)  

    output_data = []
    status_data = []
    output_identifiers = []
    output_type = []
    metadigpy_result = {}

    if len(dataPids) == 0:
      output_data = "No data objects found."

    for pid in dataPids:
        output_identifiers.append(pid)

        # If data object is not available, skip the pid.
        try:
          # if file is not text/csv, skip it
          # otherwise get the object and filename
          obj, fname, csv_status = md.get_valid_csv(manager, pid)
          if csv_status == "SKIP":
              output_data.append(f"{fname} is not a text-delimited table, skipping.")
              output_type.append("text")
              status_data.append(csv_status)
              continue
        except Exception as e:
            output_data.append(f"Unexpected Exception: {e}")
            output_type.append("text")
            status_data.append("FAILURE")
            continue

        # read in all the data
        d_read = obj.read().decode('utf-8', errors = 'replace')

        # find which entity file is documented in
        index_list = md.find_entity_index(fname, pid, entityNames, ids)
        if index_list is None:
            output_data.append(f"{fname} does not appear to be documented in the metadata.")
            output_type.append("text")
            status_data.append("FAILURE")
            continue
        # Set entity index number to the first item in the list
        z = index_list[0]

        # Set default value using the entity index
        num_header_lines = z
        # headerLines represents 'numHeaderLines' which is retrieved from the EML document
        if isinstance(headerLines, list):
            # If we successfully retrieve a list, we will check what the value is
            if headerLines[z] == 'null':
                # There are no header lines
                num_header_lines = 0
            if isinstance(headerLines[z], int):
                # We'll use the value from the list of it is an integer
                num_header_lines = headerLines[z]
        
        # try to read in the file
        df, error = md.read_csv_with_metadata(d_read, fieldDelimiter[z], num_header_lines)
        if error:
            output_data.append(f"{fname} is unable to be read as a table. {error}")
            output_type.append("text")
            status_data.append("FAILURE")
            continue

        if isinstance(df, pd.DataFrame):
            summary = df.describe()
            summary_md = summary.to_markdown()
            output_data.append(f"**{fname}** \n {summary_md} \n")
            output_type.append("markdown")
            status_data.append("SUCCESS")
        else:
            output_data.append(f"{fname} cannot be parsed." + char(type(df)))
            output_type.append("text")
            status_data.append("FAILURE")

    successes = sum(x == "SUCCESS" for x in status_data)
    failures = sum(x == "FAILURE" for x in status_data)
    skips = sum(x == "SKIP" for x in status_data)
    output = output_data
    if successes > 0 and failures == 0:
        status = "SUCCESS"
    elif successes == 0 and failures > 0:
        status = "FAILURE"
    else:
        status = "FAILURE" 

    metadigpy_result["identifiers"] = output_identifiers
    metadigpy_result["output"] = output_data
    metadigpy_result["status"] = status
    return True

  ]]></code>
  <selector>
    <name>entityNames</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./entityName</xpath>
    </subSelector>
  </selector>
  <selector>
    <name>objectNames</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./physical/objectName</xpath>
    </subSelector>
  </selector>
  <selector>
    <name>ids</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]/@id</xpath>
  </selector>
  <selector>
     <name>fieldDelimiter</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
     <subSelector>
        <name>...</name>
        <xpath>./physical/dataFormat/textFormat/simpleDelimited/fieldDelimiter</xpath>
    </subSelector>
  </selector>
  <selector>
     <name>headerLines</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
     <subSelector>
        <name>...</name>
        <xpath>./physical/dataFormat/textFormat/numHeaderLines</xpath>
    </subSelector>
  </selector>
  <dialect>
    <name>Ecological Metadata Language</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>
