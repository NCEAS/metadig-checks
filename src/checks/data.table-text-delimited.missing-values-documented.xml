<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>data.table-text-delimited.missing-values-documented</id>
  <name>Text delimited table missing values are documented</name>
  <description>Check that text delimited table missing variables are documented.</description>
  <type>identification</type>
  <level>REQUIRED</level>
  <environment>python</environment>
  <code><![CDATA[

def call():
    global output
    global status
    global output_identifiers
    global output_type
    global metadigpy_result
    from metadig import StoreManager
    from metadig import metadata as md
    import pandas as pd
    import io
    manager = StoreManager(storeConfiguration)  
    output_data = []
    status_data = []
    output_identifiers = []
    output_type = []
    metadigpy_result = {}
    if len(dataPids) == 0:
      output_data = "No data objects found."
    for pid in dataPids:
        output_identifiers.append(pid)
        # If data object is not available, skip the pid.
        try:
            # if file is not text/csv, skip it
            # otherwise get the object and filename
            obj, fname, csv_status = md.get_valid_csv(manager, pid)
            if csv_status == "SKIP":
                output_data.append(f"`{fname}` is not a text-delimited table, skipping.")
                output_type.append("markdown")
                status_data.append(csv_status)
                continue
        except Exception as e:
            output_data.append(f"Unexpected Exception: {e}")
            output_type.append("text")
            status_data.append("FAILURE")
            continue
        # Ensure that the data object is documented in the list of entity names
        entity_index = md.find_entity_index(fname, pid, entityNames, ids)[0]
        if entity_index is None:
            output_data.append(f"`{fname}` does not appear to be documented in the metadata.")
            output_type.append("markdown")
            status_data.append("FAILURE")
            continue
        # Set the default expecated header line value (the first row is headers)
        num_header_lines = 0
        # headerLines represents 'numHeaderLines' which is retrieved from the EML document
        if isinstance(headerLines, list):
            # If we successfully retrieve a list, we will check what the value is
            header_line_value = headerLines[entity_index]
            if header_line_value == 'null':
                # There are no header lines
                pass
            if isinstance(header_line_value, int):
                # We'll use the value from the list of it is an integer
                num_header_lines = header_line_value

        # Read the data object
        obj_bytes_read = obj.read()
        encoding_type, enc_msg = md.detect_text_encoding(obj_bytes_read)
        d_read_decoded = obj_bytes_read.decode(encoding_type)
        df, error = md.read_csv_with_metadata(d_read_decoded, fieldDelimiter[entity_index], num_header_lines, encoding_type)
        if error:
            output_data.append(f"`{fname}` is unable to be read as a table: {error}.")
            output_type.append("markdown")
            status_data.append("FAILURE")
            continue
        # Extract the entity from the metadata doc and attributeNames
        atts = ent.findall(".//attribute")
        att_names = [att.findtext("attributeName") for att in atts]
        mv_codes = [[code.text for code in att.findall(".//missingValueCode/code")] or [None] for att in atts]
        col_names = list(df.columns)

        common_mv_codes = ['NA', 'n/a', 'N/A', '', ' ', "NaN", "null", "NULL"]
        nine_pattern = re.compile(r"-9{3,}")

        all_undoc = []
        all_doc = []

        for col, mv in zip(col_names, mv_codes):

            # normalize data to string
            values_in_col = df[col].astype(str)
            # check for undocumented missing value codes
            explicit_match = values_in_col.isin(common_mv_codes)
            fuzzy_nine_match = values_in_col.str.contains(nine_pattern)
            matches_common = values_in_col[explicit_match | fuzzy_nine_match].tolist()
            undocumented = set(matches_common) - set(mv)

            if mv is not None and mv != [None]:
                # check for documented missing value codes  
                doc_match = values_in_col.isin(mv)
                matches_documented = values_in_col[doc_match].tolist()
                documented = set(matches_documented)
                all_doc.extend(documented)

            all_undoc.extend(undocumented)

        if len(all_undoc) == 0 and len(all_doc) > 0:
            output_data.append(f"`{fname}`'s missing value codes: ```{set(all_doc)}``` are all documented.")
            output_type.append("markdown")
            status_data.append("SUCCESS")
        if len(all_undoc) > 0 and len(all_doc) > 0:
            output_data.append(f"`{fname}`'s missing value codes: ```{set(all_doc)}``` are documented, but the following possible missing value codes were found: ```{set(all_undoc)}```")
            output_type.append("markdown")
            status_data.append("FAILURE")
        if len(all_undoc) > 0 and len(all_doc) == 0:
            output_data.append(f"`{fname}`'s missing value codes: ```{set(all_undoc)}``` are undocumented.")
            output_type.append("markdown")
            status_data.append("FAILURE")

    successes = sum(x == "SUCCESS" for x in status_data)
    failures = sum(x == "FAILURE" for x in status_data)
    skips = sum(x == "SKIP" for x in status_data)
    output = output_data

    if failures > 0:
        status = "FAILURE"
    else:
        status = "SUCCESS"
    metadigpy_result["identifiers"] = output_identifiers
    metadigpy_result["output"] = output_data
    metadigpy_result["status"] = status
    return True

  ]]></code>
  <selector>
    <name>entityNames</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./entityName</xpath>
    </subSelector>
  </selector>
  <selector>
    <name>objectNames</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./physical/objectName</xpath>
    </subSelector>
  </selector>
  <selector>
    <name>ids</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]/@id</xpath>
  </selector>
  <selector>
     <name>fieldDelimiter</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
     <subSelector>
        <name>...</name>
        <xpath>./physical/dataFormat/textFormat/simpleDelimited/fieldDelimiter</xpath>
    </subSelector>
  </selector>
  <selector>
     <name>headerLines</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
     <subSelector>
        <name>...</name>
        <xpath>./physical/dataFormat/textFormat/numHeaderLines</xpath>
    </subSelector>
  </selector>
  <dialect>
    <name>Ecological Metadata Language</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>
