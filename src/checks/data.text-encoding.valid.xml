<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
  <id>data.character-encoding</id>
  <name>Text data characters are encoded correctly</name>
  <description>Check that the text content is decodable and whether it's ascii or utf-8.</description>
  <type>identification</type>
  <level>REQUIRED</level>
  <environment>python</environment>
  <code><![CDATA[

def call():
    global output
    global status
    global output_identifiers
    global output_type
    global metadigpy_result

    from metadig import metadata as md
    from metadig import StoreManager

    manager = StoreManager(storeConfiguration)  

    output_data = []
    status_data = []
    output_identifiers = []
    output_type = []
    metadigpy_result = {}

    if len(dataPids) == 0:
      output_data = "No data objects found."

    for pid in dataPids:
        output_identifiers.append(pid)

        # If data object is not available, skip the pid.
        try:
            obj, sys = manager.get_object(pid)
            fname = md.read_sysmeta_element(sys, "fileName")
            format_id = md.read_sysmeta_element(sys, "formatId")
        except Exception as e:
            output_data.append(f"Unexpected Exception: {e}")
            output_type.append("text")
            status_data.append("FAILURE")
            continue

        if format_id.startswith("text/"):
            # Check character encoding
            bytes_read = obj.read()
            enc_type, msg = md.detect_text_encoding(bytes_read)
            # TODO: Discuss whether we should also look for characters that can cause
            #       parsing concerns like \n, \t and add a warning
            if enc_type == "ascii":
                output_data.append(f"`{fname}` is a valid 'ascii' document and does not contain encoding errors.")
                output_type.append("markdown")
                status_data.append("SUCCESS")
            elif enc_type == "utf-8":
                output_data.append(f"`{fname}` is a valid 'utf-8' document and does not contain encoding errors.")
                output_type.append("markdown")
                status_data.append("SUCCESS")
            else:
                # TODO: For now, we will only accept valid 'utf-8' and 'ascii' documents as a SUCCESS
                #       Discuss if we should have specific standards, or should proceed in another path
                output_data.append(f"`{fname}` has been detected as a '{enc_type}' document. {msg}.")
                output_type.append("markdown")
                status_data.append("FAILURE")
        else:
            output_data.append(f"`{fname}` is not a text document.")
            output_type.append("text")
            status_data.append("FAILURE")

    successes = sum(x == "SUCCESS" for x in status_data)
    failures = sum(x == "FAILURE" for x in status_data)
    skips = sum(x == "SKIP" for x in status_data)
    output = output_data
    if successes > 0 and failures == 0:
        status = "SUCCESS"
    elif successes == 0 and failures > 0:
        status = "FAILURE"
    else:
        status = "FAILURE"

    metadigpy_result["identifiers"] = output_identifiers
    metadigpy_result["output"] = output_data
    metadigpy_result["status"] = status
    return True

  ]]></code>
  <selector>
    <name>entityNames</name>
    <xpath>/eml/dataset/*[self::dataTable|self::otherEntity]</xpath>
    <subSelector>
      <name>...</name>
      <xpath>./entityName</xpath>
    </subSelector>
  </selector>
  <dialect>
    <name>Ecological Metadata Language</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
</mdq:check>
