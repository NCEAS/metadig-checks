<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1.2 ../schemas/schema1.2.xsd">
  <id>entity.attributeDefinition.present-2.1.0</id>
  <name>Entity Attribute Definition Present</name>
  <description>Check that an attribute definition exists.</description>
  <type>Interoperable</type>
  <level>OPTIONAL</level>
  <environment>python</environment>
  <code><![CDATA[
def call():
  global output
  global status
  global attributeDefinition
  global attributeName
  
  import metadig.variable as mvar
  
  NoneType = type(None)
  
  # Check if definitions are present for each attribute.
  if not attributeDefinitionPresent:
    output = "No attributes were found so unable to check attribute defintions."
    status = "FAILURE"
    return False
    
  attributeCount = 0
  missing = []
  maxPrint = 5
  
  # If a single value, convert to a list for easier processing (i.e. don't have
  # to keep checking if it's a single value or list)
  if(isinstance(attributeDefinition, str)):
    attributeDefinition = [attributeDefinition]
    
  if(isinstance(attributeName, str)):
    attributeName = [attributeName]
  
  for i in range(0, len(attributeDefinition)):
    attributeCount += 1
    definition = attributeDefinition[i]
    name = attributeName[i]
    # Check if the name is missing or blank
    if(isinstance(name, NoneType) or mvar.isBlank(name)):
      name = "attr #{}".format(i)
      
    # No definition for this attribute was specified, or it is blank
    if(isinstance(definition, NoneType) or mvar.isBlank(definition)): 
      missing.append(name)
        
  if(len(missing) == 1):
    output = "This {} attribute (of {} total) does not have a definition: {}".format(len(missing), attributeCount, missing[0])
    status = "FAILURE"
    return False
  elif(len(missing) > 1):
    output = "These {} attributes (of {} total) do not have a definition: {}".format(len(missing), attributeCount, ', '.join(missing[0:maxPrint]))
    if(len(missing) > maxPrint):
      output += ", ..."
    status = "FAILURE"
    return False
  else:
    output = "All {} attributes have a definition".format(attributeCount)
    status = "SUCCESS"
    return True
    ]]></code>
  <selector>
    <name>attributeDefinitionPresent</name>
    <xpath>boolean(
          /eml/dataset/*/attributeList/attribute/attributeDefinition or
          /*/contentInfo/MD_CoverageDescription/attributeGroup/*/attribute/*/description or
          /*/contentInfo/MI_CoverageDescription/attributeGroup/*/attribute/*/description or
          /*/contentInfo/*/dimension/MI_Band/descriptor or
          /*/contentInfo/*/dimension/MD_Band/descriptor)</xpath>
    <expression syntax="json-path">if .variableMeasured | .[] | .description != null then "True" else "False" end</expression>
  </selector>
  <selector>
    <name>attributeDefinition</name>
    <xpath>/eml/dataset/*/attributeList/attribute |
          /*/contentInfo/MD_CoverageDescription/attributeGroup/*/attribute |
          /*/contentInfo/MI_CoverageDescription/attributeGroup/*/attribute |
          /*/contentInfo/*/dimension/MI_Band |
          /*/contentInfo/*/dimension/MD_Band 
      </xpath>
    <subSelector>
      <name>definition</name>
      <xpath>
             ./attributeDefinition/text()[normalize-space()] |
             ./*/description/*/text()[normalize-space()] |
             ./descriptor/*/text()[normalize-space()]
         </xpath>
    </subSelector>
    <expression syntax="json-path">.variableMeasured | .[] | .description</expression>
  </selector>
  <selector>
    <name>attributeName</name>
    <xpath>
          /eml/dataset/*/attributeList/attribute |
          /*/contentInfo/MD_CoverageDescription/attributeGroup/*/attribute |
          /*/contentInfo/MI_CoverageDescription/attributeGroup/*/attribute |
          /*/contentInfo/*/dimension/MI_Band |
          /*/contentInfo/*/dimension/MD_Band
      </xpath>
    <subSelector>
      <name>name</name>
      <!-- Multiple paths may be present and return values, but we need just one -->
      <xpath>
             (./attributeName/text()[normalize-space()] | 
             ./sequenceIdentifier/MemberName/aName/*/text()[normalize-space()] |
             ./descriptor/*/text()[normalize-space()])[1]
         </xpath>
    </subSelector>
    <expression syntax="json-path">.variableMeasured | .[] | .name</expression>
  </selector>
  <dialect>
    <name>DataCite 4</name>
    <xpath>boolean(/*[local-name() = 'resource'])</xpath>
  </dialect>
  <dialect>
    <name>Ecological Metadata Language</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
  <dialect>
    <name>ISO 19115 and ISO 19115-2 / ISO 19139, ISO 19139-2, ISO 19115-1, ISO 19115-3 </name>
    <xpath>boolean(/*[local-name() = 'MI_Metadata' or local-name() = 'MD_Metadata'])</xpath>
  </dialect>
  <dialect>
    <name>Schema.org</name>
    <expression syntax="json-path">.["@context"]</expression>
  </dialect>
</mdq:check>
