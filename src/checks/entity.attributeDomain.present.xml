<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
   <id>entity.attributeDomain.present.1</id>
   <name>Entity Attribute Domain Present</name>
   <description>Check that an attribute domain is defined for each relevant attribute.</description>
   <type>Reusable</type>
   <level>REQUIRED</level>
   <environment>python</environment>
   <code><![CDATA[
def call():
  global output
  global status
  global attributeDomain
  global attributeName
  
  import metadig.variable as mvar
  
  NoneType = type(None)
  # Check if a measurementScale is present for each attribute.
  if not attributesPresent:
    output = "No attributes are present so attribute measurement domain cannot be checked."
    status = "FAILURE"
    return False
    
  attributeCount = 0
  missing = []
  maxPrint = 5
  
  attributeDomain = mvar.toUnicode(attributeDomain)
  attributeName = mvar.toUnicode(attributeName)
    
  # If only a single value is returned (vs type "list"), then convert to a list
  # for easier processing
  if(isinstance(attributeDomain, unicode)):
    attributeDomain = [attributeDomain]
    
  if(isinstance(attributeName, unicode)):
    attributeName = [attributeName]
  
  for i in range(0, len(attributeDomain)):
    attributeCount += 1
    domain = attributeDomain[i]
    name = attributeName[i]
    if(isinstance(name, NoneType) or mvar.isBlank(name)):
      name = "attr #{}.format(i)"

    # No domain for this attribute was specified
    if(isinstance(domain, NoneType) or mvar.isBlank(domain)):
      missing.append(name)

  if(len(missing) == 1):
    output = u"This {} attribute (of {} total) does not have a measurement domain defined: {}.".format(len(missing), attributeCount, missing[0])
    status = "FAILURE"
    return False
  elif(len(missing) > 1):
    output = u"The following {} attributes (of {} total) do not have a measurement domain specified: '{}'.".format(len(missing), attributeCount, ', '.join(missing[0:maxPrint]))
    if(len(missing) > maxPrint):
      output += u", ..."
    status = "FAILURE"
    return False
  else:
    output = "All {} attributes that require a measurement domain have one defined.".format(attributeCount)
    status = "SUCCESS"
    return True
    ]]></code>
   <selector>
      <name>attributesPresent</name>
      <xpath>boolean(
          /eml/dataset/*/attributeList/attribute or
          /*/contentInfo/*/dimension/MI_Band or
          /*/contentInfo/*/dimension/MD_Band)</xpath>
   </selector>
   <selector>
      <name>attributeDomain</name>
      <xpath>/eml/dataset/*/attributeList/attribute |
          /*/contentInfo/*/dimension/MI_Band |
          /*/contentInfo/*/dimension/MD_Band 
      </xpath>
      <subSelector>
         <!-- if attributes are present, one of these domain types must be present (even dateTimeDomain, which is optional in the EML spec) -->
         <name>domain</name>
         <xpath>
             ./measurementScale/nominal/nonNumericDomain |
             ./measurementScale/ordinal/nonNumericDomain |
             ./measurementScale/interval/numericDomain |
             ./measurementScale/ratio/numericDomain |
             ./measurementScale/dateTime/dateTimeDomain |
             ./minValue |
             ./maxValue
         </xpath>
     </subSelector>
   </selector>
   <selector>
      <name>attributeName</name>
      <xpath>
          /eml/dataset/*/attributeList/attribute |
          /*/contentInfo/*/dimension/MI_Band |
          /*/contentInfo/*/dimension/MD_Band
      </xpath>
      <subSelector>
         <name>name</name>
         <xpath>
             ./attributeName/text()[normalize-space()] | 
             ./sequenceIdentifier/MemberName/aName/*/text()[normalize-space()]
         </xpath>
     </subSelector>
   </selector>
   <dialect>
      <name>DataCite 3.1</name>
      <xpath>boolean(/*[local-name() = 'resource'])</xpath>
   </dialect>
   <dialect>
      <name>Dryad Data Package and Data File Modules</name>
      <xpath>boolean(/*[local-name() = 'DryadDataFile' or local-name() = 'DryadDataPackage'])</xpath>
   </dialect>
   <dialect>
      <name>Ecological Metadata Language</name>
      <xpath>boolean(/*[local-name() = 'eml'])</xpath>
   </dialect>
   <dialect>
      <name>ISO 19115 and ISO 19115-2 / ISO 19139, ISO 19139-2, ISO 19115-1, ISO 19115-3 </name>
      <xpath>boolean(/*[local-name() = 'MI_Metadata' or local-name() = 'MD_Metadata'])</xpath>
   </dialect>
</mdq:check>
