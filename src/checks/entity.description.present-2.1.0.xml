<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1.2 ../schemas/schema1.2.xsd">
  <id>entity.description.present-2.1.0</id>
  <name>Entity Description Present</name>
  <description>Check that a description is available for every entity.</description>
  <type>Reusable</type>
  <level>REQUIRED</level>
  <environment>python</environment>
  <code><![CDATA[
def call():
  global output
  global status
  global entities
  global entityNames
  
  import metadig.variable as mvar
  
  NoneType = type(None)
  maxPrint = 5
  
  # Check if a entity description is present for each attribute.
  if not entityPresent:
    output = "No entities were found so unable to check their descriptions."
    status = "FAILURE"
    return False

  if entities is None:
    output = "No entity descriptions were found."
    status = "FAILURE"
    return False
    
  entityCount = 0
  missing = []
  descriptions = []
    
  entities = mvar.toUnicode(entities)
  entityNames = mvar.toUnicode(entityNames)

  if(isinstance(entities, str)):
    entities = [entities]

  if(isinstance(entityNames, str)):
    entityNames = [entityNames]
  
  if isinstance(entityNames, NoneType):
    entityNames = [None] * len(entities)
  
  # Loop through the entities, checking if each entity has a description.
  # If the entity does not have a description, then add the name to a list
  # of delinquent entities. If no name is present, then use the entity 
  # sequence number.
  for i in range(0, len(entities)):
    entityCount += 1
    description = entities[i]
    name = entityNames[i]
    # Check if the name is missing or blank
    if(isinstance(name, NoneType) or mvar.isBlank(name)):
      name = "attr #{}".format(i)
      
    # No description for this entity was specified
    if(description == None):
        missing.append(name)

    descriptions.append(description)
  
  # Add the list of deliquent entities, if any, to the output
  if(len(missing) > 0):
    output = "These entities are missing a description: {}".format(', '.join(missing[0:maxPrint]))
    if(len(missing) > maxPrint):
      output += ", ..."
    status = "FAILURE"
    return False
  else:
    output = "All entities have descriptions {}.".format(', '.join(descriptions[0:maxPrint]))
    status = "SUCCESS"
    return True
    ]]></code>
  <selector>
    <name>entityPresent</name>
    <xpath>boolean(
          /eml/dataset/*[self::dataTable|self::spatialRaster|self::spatialVector|self::storedProcedure|self::view|self::otherEntity] or
          /*/contentInfo/MD_CoverageDescription or
          /*/contentInfo/MI_CoverageDescription)
      </xpath>
      <expression syntax="json-path">(.["@graph"]? // [.] )[] | if .distribution != null then "True" else "False" end</expression>
  </selector>
  <selector>
    <name>entities</name>
    <xpath>
          /eml/dataset/*[self::dataTable|self::spatialRaster|self::spatialVector|self::storedProcedure|self::view|self::otherEntity] |
          /*/contentInfo/MD_CoverageDescription |
          /*/contentInfo/MI_CoverageDescription
      </xpath>
    <subSelector>
      <name>description</name>
      <xpath>
             ./entityDescription |
             ./attributeDescription/RecordType
         </xpath>
    </subSelector>
    <expression syntax="json-path">(.["@graph"]? // [.] )[] | (
      .distribution[]?
        | select(."@type"? == "DataDownload")
        | .description
      ) // (
      if .distribution?."@type"? == "DataDownload"
      then .distribution.description
      else null
      end
      )</expression>
  </selector>
  <selector>
    <name>entityNames</name>
    <xpath>
          /eml/dataset/*[self::dataTable|self::spatialRaster|self::spatialVector|self::storedProcedure|self::view|self::otherEntity] |
          /*/contentInfo/MD_CoverageDescription |
          /*/contentInfo/MI_CoverageDescription
      </xpath>
    <!-- Coverage descriptions don't really have a specific name, so use the description instead -->
    <subSelector>
      <name>names</name>
      <xpath>
             ./entityName | 
             ./attributeDescription/RecordType
         </xpath>
    </subSelector>
    <expression syntax="json-path">(.["@graph"]? // [.] )[] | (
      .distribution[]?
        | select(."@type"? == "DataDownload")
        | .name
      ) // (
      if .distribution?."@type"? == "DataDownload"
      then .distribution.name
      else null
      end
      )</expression>
  </selector>
  <dialect>
    <name>DataCite 4</name>
    <xpath>boolean(/*[local-name() = 'resource'])</xpath>
  </dialect>
  <dialect>
    <name>Ecological Metadata Language</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
  <dialect>
    <name>ISO 19115 and ISO 19115-2 / ISO 19139, ISO 19139-2, ISO 19115-1, ISO 19115-3 </name>
    <xpath>boolean(/*[local-name() = 'MI_Metadata' or local-name() = 'MD_Metadata'])</xpath>
  </dialect>
  <dialect>
    <name>Schema.org</name>
    <expression syntax="json-path">.["@context"]</expression>
  </dialect>
</mdq:check>
