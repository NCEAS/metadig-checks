<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
   <id>entity.identifier.resolvable.1</id>
   <name>Entity Identifier Resolvable</name>
   <description>Check that the entity identifier is resolvable.</description>
   <type>Findable</type>
   <level>REQUIRED</level>
   <environment>python</environment>
   <code><![CDATA[
def call():
  global output
  global status
  global entityIdentifier
  
  import metadig.variable as mvar
  import metadig.checks as checks
  import urllib
  import re
  import numbers
  
  d1_resolve_service="https://cn.dataone.org/cn/v2/resolve/"

  # TODO: This check is only inspecting the first entity identifier
  # Update it to check the first N identifiers (where N is some
  # reasonable number to check. Note that there may be hundreds or
  # thousands of ids, and we probably don't want to check them all.
  
  # An entity identifier is not present
  if 'entityIdentifier' not in globals() or entityIdentifier is None:
    output = "No entity identifiers were found."
    status = "FAILURE"
    return False
         
  entityIdentifier = mvar.toUnicode(entityIdentifier)
  # If a single value, convert to a list for easier processing (i.e. don't 
  # have to keep checking if it's a single value or list)
  if(isinstance(entityIdentifier, unicode)):
    entityIdentifier = [entityIdentifier]

  if (mvar.isBlank(entityIdentifier)):
    output = "The entity identifier is blank."
    status = "FAILURE"
    return False
  else: 
    id = entityIdentifier[0].strip()
    if(len(entityIdentifier) > 1):
      output = u"The entity identifier '{}' was found (first of {} identifiers)".format(id, len(entityIdentifier))
    else:
      output = "The entity identifier '{}' was found".format(id)
      
  # Now check if the entity identifier is a resolvable url. If it doesn't look like a URL, then 
  # see if DataONE knows about it.
  usedD1 = False
  isDOI = False
  if(re.match("^\s*http.*:\/", id)):
    resolvable, msg = checks.isResolvable(id)
  elif(re.match('doi:', id)):
    isDOI = True
    # If the identifier is a 'bare' DOI (e.g. "doi:10.18739/A2027H"), then prepend with a DOI resolver link
    # i.e. https://dx.doi.org
    resolvable, msg = checks.isResolvable("https://dx.doi.org/{}".format(id.strip()))
  else:
    usedD1 = True
    url = u"{}{}".format(d1_resolve_service,urllib.quote(id))
    resolvable, msg = checks.isResolvable(url)
    
  if (resolvable):
    if(usedD1):
      output = u'{} and is resolvable using the DataONE resolve service.'.format(output)
    elif(isDOI):
      output = u'{} and is resolvable using a DOI resolver.'.format(output)      
    else:
      output = u'{} and is resolvable.'.format(output)      
      
    status = "SUCCESS"
    return True
  else:
    # output = "{}, but is not resolvable: {}".format(output, msg)
    output = "{}, but is not resolvable.".format(output)      
    status = "FAILURE"
    return False
   ]]></code>
   <selector>
      <name>entityIdentifier</name>
      <xpath>
          /eml/dataset/*[self::dataTable|self::spatialRaster|self::spatialVector|self::storedProcedure|self::view|self::otherEntity]/@id |
          /eml/dataset/*/alternateIdentifier
      </xpath>
   </selector>
   <dialect>
      <name>DataCite 3.1</name>
      <xpath>boolean(/*[local-name() = 'resource'])</xpath>
   </dialect>
   <dialect>
      <name>Dryad Data Package and Data File Modules</name>
      <xpath>boolean(/*[local-name() = 'DryadDataFile' or local-name() = 'DryadDataPackage'])</xpath>
   </dialect>
   <dialect>
      <name>Ecological Metadata Language</name>
      <xpath>boolean(/*[local-name() = 'eml'])</xpath>
   </dialect>
   <dialect>
      <name>ISO 19115 and ISO 19115-2 / ISO 19139 and ISO 19139-2</name>
      <xpath>boolean(/*[local-name() = 'MI_Metadata' or local-name() = 'MD_Metadata'])</xpath>
   </dialect>
   <dialect>
      <name>ISO 19115-1 / ISO 19115-3</name>
      <xpath>boolean(/*[local-name() = 'MD_Metadata'])</xpath>
   </dialect>
</mdq:check>
