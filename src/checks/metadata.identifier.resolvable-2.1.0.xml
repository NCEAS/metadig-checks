<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1.2 ../schemas/schema1.2.xsd">
  <id>metadata.identifier.resolvable-2.1.0</id>
  <name>Metadata Identifier Resolvable</name>
  <description>Check that the metadata identifier exists and is resolvable.</description>
  <type>Accessible</type>
  <level>REQUIRED</level>
  <environment>python</environment>
  <code><![CDATA[
def call():
  global output
  global status

  import metadig.variable as mvar
  import metadig.checks as checks
  import urllib.request, urllib.parse, urllib.error
  import re
  global metadataIdentifier

  d1_resolve_service="https://cn.dataone.org/cn/v2/resolve/"

  # check if a metadata identifier is present
  if 'metadataIdentifier' not in globals() or metadataIdentifier is None:
    output = "A metadata identifier was not found."
    status = "FAILURE"
    return False
  
  # This should only be a single value, but if not (a list is returned) just get the first 
  # one
  if len(metadataIdentifier) > 0:
    for id in metadataIdentifier:
      if isinstance(id, str) and id.lower().startswith("doi:"):
        metadataIdentifier = id
        break
    else:
        metadataIdentifier = metadataIdentifier[0]

  if (mvar.isBlank(metadataIdentifier)):
    output = "The metadata identifier is blank."
    status = "FAILURE"
    return False
    
  # Now check if the metadata identifier is a resolvable url. If it doesn't look like a URL, then 
  # see if DataONE knows about it.
  usedD1 = False
  isDOI = False
  if(re.match("^\s*http.*:\/", metadataIdentifier)):
    resolvable, msg = checks.isResolvable(metadataIdentifier)
  elif(re.match('doi:', metadataIdentifier)):
    isDOI = True
    # If the identifier is a 'bare' DOI (e.g. "doi:10.18739/A2027H"), then prepend with a DOI resolver link
    # i.e. https://dx.doi.org
    resolvable, msg = checks.isResolvable("https://dx.doi.org/{}".format(metadataIdentifier.strip()))
  else:
    usedD1 = True
    url = "{}{}".format(d1_resolve_service,urllib.parse.quote(metadataIdentifier))
    resolvable, msg = checks.isResolvable(url)
        
  if (resolvable):
    if(usedD1):
      output = 'Metadata identifier {} was found, is resolvable using the DataONE resolve service.'.format(metadataIdentifier)
    elif(isDOI):
      output = 'Metadata identifier {} was found, is resolvable using a DOI resolver.'.format(metadataIdentifier)      
    else:
      output = 'Metadata identifier {} was found, is resolvable.'.format(metadataIdentifier)      
          
    status = "SUCCESS"
    return True
  else:
    # If the URL is unresolvable because it is private, and it is a DataONE identifier, then this
    # special case will pass. Print an appropriate messge explaining this.
    isPrivate = re.search("unauthorized", msg.lower())
    if(isPrivate and usedD1):
      output = 'Metadata identifier {} was found, is resolvable using the DataONE resolve service, but is not publicly readable'.format(metadataIdentifier)
      status = "SUCCESS"
    else:  
      output = "Metadata identifier {} was found, but is not resolvable.".format(metadataIdentifier)      
      status = "FAILURE"
      return False
   ]]></code>
  <selector>
    <name>metadataIdentifier</name>
    <xpath>
             /resource/identifier |
             /*/fileIdentifier/*/text()[normalize-space()] |
             /eml/@packageId
      </xpath>
      <expression syntax="json-path">.identifier as $id | ($id[]?.value? // $id.value? // $id) | select(. != null)</expression>
  </selector>
  <dialect>
    <name>DataCite 4</name>
    <xpath>boolean(/*[local-name() = 'resource'])</xpath>
  </dialect>
  <dialect>
    <name>Ecological Metadata Language</name>
    <xpath>boolean(/*[local-name() = 'eml'])</xpath>
  </dialect>
  <dialect>
    <name>ISO 19115 and ISO 19115-2 / ISO 19139 and ISO 19139-2</name>
    <xpath>boolean(/*[local-name() = 'MI_Metadata' or local-name() = 'MD_Metadata'])</xpath>
  </dialect>
  <dialect>
    <name>Schema.org</name>
    <expression syntax="json-path">.["@context"]</expression>
  </dialect>
</mdq:check>
