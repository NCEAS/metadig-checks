<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
   <id>metadata.identifier.resolvable.1</id>
   <name>Metadata Identifier Resolvable</name>
   <description>Check that the metadata identifier exists and is resolvable.</description>
   <type>Accessible</type>
   <level>REQUIRED</level>
   <environment>python</environment>
   <code><![CDATA[
def call():
  global output
  global status

  import metadig.variable as mvar
  import metadig.checks as checks
  import urllib
  import re
  global metadataIdentifier

  d1_resolve_service="https://cn.dataone.org/cn/v2/resolve/"

  # check if a metadata identifier is present
  if 'metadataIdentifier' not in globals() or metadataIdentifier is None:
    output = "A metadata identifier was not found."
    status = "FAILURE"
    return False
    
  metadataIdentifier = mvar.toUnicode(metadataIdentifier)
  
  # This should only be a single value, but if not (a list is returned) just get the first 
  # one
  if(isinstance(metadataIdentifier, list)):
    metadataIdentifier = metadataIdentifier[0]

  if (mvar.isBlank(metadataIdentifier)):
    output = "The metadata identifier is blank."
    status = "FAILURE"
    return False
  else:
    output = u"The metadata identifier '{}' was found)".format(metadataIdentifier)
    id = metadataIdentifier
    
  # Now check if the metadata identifier is a resolvable url. If it doesn't look like a URL, then 
  # see if DataONE knows about it.
  usedD1 = False
  isDOI = False
  if(re.match("^\s*http.*:\/", id)):
    resolvable, msg = checks.isResolvable(id)
  elif(re.match('doi:', id)):
    isDOI = True
    # If the identifier is a 'bare' DOI (e.g. "doi:10.18739/A2027H"), then prepend with a DOI resolver link
    # i.e. https://dx.doi.org
    resolvable, msg = checks.isResolvable("https://dx.doi.org/{}".format(id.strip()))
  else:
    usedD1 = True
    url = "{}{}".format(d1_resolve_service,urllib.quote(id))
    resolvable, msg = checks.isResolvable(url)
        
  if (resolvable):
    if(usedD1):
      output = u'{} and is resolvable using the DataONE resolve service.'.format(output)
    elif(isDOI):
      output = u'{} and is resolvable using a DOI resolver.'.format(output)      
    else:
      output = u'{} and is resolvable.'.format(output)      
          
    status = "SUCCESS"
    return True
  else:
    output = u"{}, but is not resolvable.".format(output)      
    status = "FAILURE"
    return False
   ]]></code>
   <selector>
      <name>metadataIdentifier</name>
      <xpath>/*/metadataIdentifier/MD_Identifier |
             /*/fileIdentifier/*/text()[normalize-space()] |
             /eml/@packageId
      </xpath>
   </selector>
   <dialect>
      <name>DataCite 3.1</name>
      <xpath>boolean(/*[local-name() = 'resource'])</xpath>
   </dialect>
   <dialect>
      <name>Dryad Data Package and Data File Modules</name>
      <xpath>boolean(/*[local-name() = 'DryadDataFile' or local-name() = 'DryadDataPackage'])</xpath>
   </dialect>
   <dialect>
      <name>Ecological Metadata Language</name>
      <xpath>boolean(/*[local-name() = 'eml'])</xpath>
   </dialect>
   <dialect>
      <name>ISO 19115 and ISO 19115-2 / ISO 19139 and ISO 19139-2</name>
      <xpath>boolean(/*[local-name() = 'MI_Metadata' or local-name() = 'MD_Metadata'])</xpath>
   </dialect>
   <dialect>
      <name>ISO 19115-1 / ISO 19115-3</name>
      <xpath>boolean(/*[local-name() = 'MD_Metadata'])</xpath>
   </dialect>
</mdq:check>
