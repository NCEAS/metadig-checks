<?xml version="1.0" encoding="UTF-8"?>
<mdq:check xmlns:mdq="https://nceas.ucsb.edu/mdqe/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://nceas.ucsb.edu/mdqe/v1 ../schemas/schema1.xsd">
   <id>resource.projectTitle.controlled.1</id>
   <name>Resource Project Title Controlled</name>
   <description>Check if the project title is contained in a list of known projects.</description>
   <type>Findable</type>
   <level>REQUIRED</level>
   <environment>rscript</environment>
   <code><![CDATA[
    library(jsonlite)
    library(stringdist)
    
    # This check extracts the project tilte from the metadata document and compares it
    # to a controlled list of DOE projects for an exact match. If an exact match is not 
    # found, the closest fuzzy match is found and displayed in the check output.
    # Check the project title extracted from the metadata document
    if (length(projectTitle) == 0) {
      status <- "FAILURE"
      message <- "No project title was found."
    } else if (length(projectTitle) > 1) {
      status <- "FAILURE"
      message <- "More than one project title is present, only one is allowed."
    } else {
      library(stringr)
      # Trim whitespace, split abstract on whitespace
      projectTitle <- trimws(projectTitle)
      
      # Read in the controlled project title list
      projectListFn <- "ess-dive-projects.json"
      projectListPath <- sprintf("%s/%s", mdq_params[['metadigDataDir']], projectListFn)
      projects <- read_json(projectListPath, simplifyVector = FALSE)
      controlledProjectTitles = list()
      # Load project titles into a simple list, for use with the string distance functions
      for (i in 1:length(projects)) {
          controlledProjectTitles[i] <- projects[[i]]$projectTitle
      }
    }  

    # When using the fuzzy match, a candidate match cannot be more different than this percent.
    diffTolerance = 65.0 
    maxDist = 100
    noMatchFound <- 0
    closestDist = maxDist
    closestDistIndex = NA
    smallestPercentDiff <- 10000
    exactMatchFound <- FALSE
    message <- list()
    for (ictrl in 1:length(controlledProjectTitles)) {
        dist <- stringdist(projectTitle, controlledProjectTitles[[ictrl]], method=c("lv"))
        percentDiff <- (dist/nchar(projectTitle)) * 100.0
        if(percentDiff < smallestPercentDiff) {
            smallestPercentDiff <- percentDiff
        }
        if(dist == 0) {
            exactMatchFound <- TRUE
            break
        } else if (dist < closestDist) {
            closestDist <- dist
            closestDistIndex <- ictrl
        } 
    }
    
    status <- "FAILURE"
    message <- list()
    # An exact match was found
    if (exactMatchFound) {
        message <- "The DOE project title was found in the controlled list of ESS projects."
        status <- "SUCCESS"
    } else {
        # An exact match was not found, print out the closest match
        if(smallestPercentDiff < diffTolerance) {
            # close match found
            status <- "FAILURE"
            message <- sprintf("The DOE project title listed is not from the controlled list of ESS projects: %s. \nThe closest match is: %s", projectTitle, controlledProjectTitles[[closestDistIndex]])
        } else {
            # No match was found within the difference tolerance
            message <- sprintf("The DOE project title listed is not from the controlled list of ESS projects: %s\n", projectTitle)
            status <- "FAILURE"
        }
    }

     mdq_result <- list(status = status,
                        output = list(list(value = message)))
      ]]></code>
   <selector>
      <name>projectTitle</name>
      <xpath>/eml/dataset/project/title</xpath>
   </selector>
   <dialect>
      <name>Ecological Metadata Language</name>
      <xpath>boolean(/*[local-name() = 'eml'])</xpath>
   </dialect>
</mdq:check>
